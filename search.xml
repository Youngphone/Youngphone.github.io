<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Hello World</title>
      <link href="/articles/Hexo/Butterfly/hello-world/"/>
      <url>/articles/Hexo/Butterfly/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Categories-amp-Tags"><a href="#Categories-amp-Tags" class="headerlink" title="Categories &amp; Tags"></a>Categories &amp; Tags</h3><p>Only posts support the use of categories and tags. Categories apply to posts in order, resulting in a hierarchy of classifications and sub-classifications. Tags are all defined on the same hierarchical level so the order in which they appear is not important.</p><h4 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h4><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">categories:</span><br><span class="line"><span class="bullet">-</span> Sports</span><br><span class="line"><span class="bullet">-</span> Baseball</span><br><span class="line">tags:</span><br><span class="line"><span class="bullet">-</span> Injury</span><br><span class="line"><span class="bullet">-</span> Fight</span><br><span class="line"><span class="bullet">-</span> Shocking</span><br></pre></td></tr></tbody></table></figure><p>If you want to apply multiple category hierarchies, use a list of names instead of a single name. If Hexo sees any categories defined this way on a post, it will treat each category for that post as its own independent hierarchy.</p><h4 id="Example-1"><a href="#Example-1" class="headerlink" title="Example"></a>Example</h4><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">categories:</span><br><span class="line"><span class="bullet">-</span> [Sports, Baseball]</span><br><span class="line"><span class="bullet">-</span> [MLB, American League, Boston Red Sox]</span><br><span class="line"><span class="bullet">-</span> [MLB, American League, New York Yankees]</span><br><span class="line"><span class="bullet">-</span> Rivalries</span><br></pre></td></tr></tbody></table></figure><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
          <category> Butterfly </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在powershell中使用virtualenvwrapper</title>
      <link href="/articles/Win11/powershell/virtualenvwrapper-powershell/"/>
      <url>/articles/Win11/powershell/virtualenvwrapper-powershell/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>由于Python的版本众多，还有Python2和Python3的争论，因此有些软件包或第三方库就容易出现版本不兼容的问题。通过&nbsp;<code>virtualenv</code>&nbsp;这个工具，就可以构建一系列&nbsp;<code>虚拟的Python环境</code>&nbsp;，然后在每个环境中安装需要的软件包(配合&nbsp;<code>pip</code>&nbsp;使用)，这一系列的环境是相互隔离的。作为一个独立的环境就不容易出现版本问题，还方便部署。为了使用virtualenv更方便，可以借助&nbsp;<code>virtualenvwrapper</code></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="安装Python"><a href="#安装Python" class="headerlink" title="安装Python"></a>安装Python</h3><p>由于&nbsp;<code>virtualenvwrapper</code>只是一个Python虚拟环境管理工具，所以我们首先得有多个Python版本。</p><blockquote><p><code>Python</code>官网:&nbsp;<a href="https://www.python.org/">https://www.python.org/</a></p></blockquote><p>下面给出一些常用版本的下载链接，点击下载地址列的版本号即可下载。</p><table><thead><tr><th align="center">版本</th><th align="center">官方下载地址</th></tr></thead><tbody><tr><td align="center">3.7 (32bit)</td><td align="center"><a href="https://www.python.org/ftp/python/3.7.9/python-3.7.9.exe">python-3.7.9.exe</a></td></tr><tr><td align="center">3.7 (64bit)</td><td align="center"><a href="https://www.python.org/ftp/python/3.7.9/python-3.7.9-amd64.exe">python-3.7.9-amd64.exe</a></td></tr><tr><td align="center">3.8 (32bit)</td><td align="center"><a href="https://www.python.org/ftp/python/3.8.10/python-3.8.10.exe">python-3.8.10.exe</a></td></tr><tr><td align="center">3.8 (64bit)</td><td align="center"><a href="https://www.python.org/ftp/python/3.8.10/python-3.8.10-amd64.exe">python-3.8.10-amd64.exe</a></td></tr><tr><td align="center">3.9 (32bit)</td><td align="center"><a href="https://www.python.org/ftp/python/3.9.13/python-3.9.13.exe">python-3.9.13.exe</a></td></tr><tr><td align="center">3.9 (64bit)</td><td align="center"><a href="https://www.python.org/ftp/python/3.9.13/python-3.9.13-amd64.exe">python-3.9.13-amd64.exe</a></td></tr><tr><td align="center">3.10 (32bit)</td><td align="center"><a href="https://www.python.org/ftp/python/3.10.8/python-3.10.8.exe">python-3.10.8.exe</a></td></tr><tr><td align="center">3.10 (64bit)</td><td align="center"><a href="https://www.python.org/ftp/python/3.10.8/python-3.10.8-amd64.exe">python-3.10.8-amd64.exe</a></td></tr></tbody></table><blockquote><p>注意要将安装的<code>Python</code>添加到环境变量中，不同版本的优先级可通过在环境变量中的顺序进行调整。</p></blockquote><h3 id="安装virtualenvwrapper-win"><a href="#安装virtualenvwrapper-win" class="headerlink" title="安装virtualenvwrapper-win"></a>安装virtualenvwrapper-win</h3><figure class="highlight powershell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install virtualenv</span><br><span class="line">pip install virtualenvwrapper<span class="literal">-win</span></span><br></pre></td></tr></tbody></table></figure><p>默认创建的虚拟环境位于C:\Users\username\envs,可以通过环境变量&nbsp;<code>WORKON_HOME</code></p><p>&nbsp;来定制。</p><p>通过计算机–&gt;属性–&gt;高级系统设置–&gt;环境变量–&gt;在系统变量中新建“变量名”：WORKON_HOME,变量值：“你自定义的路径”。</p><p>现在你可以在<code>cmd</code>中使用<code>virtualenvwrapper</code>的相关命令来构建和管理Python虚拟环境了。</p><h2 id="virtualenvwrapper命令"><a href="#virtualenvwrapper命令" class="headerlink" title="virtualenvwrapper命令"></a>virtualenvwrapper命令</h2><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><p>创建虚拟环境：</p><figure class="highlight powershell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkvirtualenv [环境名]</span><br></pre></td></tr></tbody></table></figure><p>创建指定解释器的虚拟环境（两种写法）：</p><figure class="highlight powershell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkvirtualenv <span class="literal">-p</span> python3.x [环境名]</span><br><span class="line">mkvirtualenv [环境名] <span class="literal">--python</span>=python3.x</span><br></pre></td></tr></tbody></table></figure><p>删除环境：</p><figure class="highlight powershell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rmvirtualenv [环境名]</span><br></pre></td></tr></tbody></table></figure><p>激活环境：</p><figure class="highlight powershell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">workon [环境名]</span><br></pre></td></tr></tbody></table></figure><p>退出环境：</p><figure class="highlight powershell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">deactivate [环境名]</span><br></pre></td></tr></tbody></table></figure><p>列出所有环境：</p><figure class="highlight powershell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">workon 或者 lsvirtualenv</span><br></pre></td></tr></tbody></table></figure><p>详细介绍请参考<a href="https://virtualenvwrapper.readthedocs.io/en/latest/command_ref.html">官方手册</a>。</p><h3 id="环境重建"><a href="#环境重建" class="headerlink" title="环境重建"></a>环境重建</h3><p>先将当前环境的安装包列表保存到文件requirements.txt中：</p><figure class="highlight powershell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip freeze &gt; requirements.txt</span><br></pre></td></tr></tbody></table></figure><p>配合pip，可以批量安装对应版本的软件包，快速重建环境，在新环境中完成部署：</p><figure class="highlight powershell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install <span class="literal">-r</span> packages.txt</span><br></pre></td></tr></tbody></table></figure><h2 id="在Powershell中使用"><a href="#在Powershell中使用" class="headerlink" title="在Powershell中使用"></a>在Powershell中使用</h2><h3 id="修改Powershell执行策略"><a href="#修改Powershell执行策略" class="headerlink" title="修改Powershell执行策略"></a>修改Powershell执行策略</h3><p>完成上述配置后，我们已经可以在命令提示符<code>cmd</code>中使用<code>virtualenvwrapper</code>的各个命令了，但在<code>powershell</code>中不能正常使用。</p><p>以管理员方式运行 powershell 输入&nbsp;<code>Set-ExecutionPolicy RemoteSigned</code>执行策略更改, 在弹出的<code>[Y] 是(Y) [N] 否(N) [S] 挂起(S) [?] 帮助 (默认值为“Y”):</code>提示后输入<code>Y</code>即可。</p><p>此时我们可以在<code>powershell</code>中运行大部分命令：</p><p><img src="https://s2.loli.net/2022/10/28/xYTIWU529boQ4yA.png"></p><p>但仍不能通过<code>workon &lt;虚拟环境名&gt;</code>进入指定的虚拟环境，这是因为<code>workon</code>&nbsp;是一个批处理脚本，如果你从 PowerShell 运行它，它会在一个新的 <code>CMD</code> 子进程中启动，在那里做它的事情，然后退出并返回到<code> PowerShell</code> 提示符.由于子进程无法修改其父进程，因此当您返回 <code>PowerShell</code> 时，<code>workon.bat</code>&nbsp;所做的所有修改都会丢失。</p><h3 id="使用workon-ps1脚本"><a href="#使用workon-ps1脚本" class="headerlink" title="使用workon.ps1脚本"></a>使用workon.ps1脚本</h3><p>要解决上述问题，我们只需要在<code>workon.bat</code>所在的<code>python</code>的<code>scripts</code>文件夹下新建一个<code>workon.ps1</code>文件，写入下列<code>powershell</code>脚本，详细介绍以及其他方法可以参考<a href="https://stackoverflow.com/questions/38944525/workon-command-doesnt-work-in-windows-powershell-to-activate-virtualenv">stackflow</a>中的回答：</p><figure class="highlight powershell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="operator">-not</span> (<span class="built_in">Test-Path</span> env:WORKON_HOME))</span><br><span class="line">{</span><br><span class="line">    <span class="variable">$WORKON_HOME</span> = <span class="string">'~\Envs'</span></span><br><span class="line">} <span class="keyword">else</span> {</span><br><span class="line">    <span class="variable">$WORKON_HOME</span> = (<span class="variable">$env:WORKON_HOME</span>).Replace(<span class="string">'"'</span>,<span class="string">''</span>)</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$args</span>.length <span class="operator">-eq</span> <span class="number">0</span>) {</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"Pass a name to activate one of the following virtualenvs:"</span></span><br><span class="line">    <span class="built_in">echo</span> ==============================================================================</span><br><span class="line">    (<span class="built_in">Get-ChildItem</span> <span class="literal">-Path</span> <span class="variable">$WORKON_HOME</span>).Name</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="variable">$VENV</span> = <span class="variable">$args</span><span class="function">[<span class="number">0</span>]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!(<span class="built_in">Test-Path</span> <span class="literal">-Path</span> (<span class="string">"<span class="variable">$</span>(<span class="variable">$WORKON_HOME</span>)\<span class="variable">$</span>(<span class="variable">$VENV</span>)"</span>))) {</span><br><span class="line">    <span class="built_in">echo</span> (<span class="string">"virtualenv <span class="variable">$</span>(<span class="variable">$VENV</span>) does not exist"</span>)</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"Create it with 'mkvirtualenv <span class="variable">$</span>(<span class="variable">$VENV</span>)'"</span></span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!(<span class="built_in">Test-Path</span> <span class="literal">-Path</span> (<span class="string">"<span class="variable">$</span>(<span class="variable">$WORKON_HOME</span>)\<span class="variable">$</span>(<span class="variable">$VENV</span>)\Scripts\activate.ps1"</span>) ))  {</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"<span class="variable">$</span>(<span class="variable">$WORKON_HOME</span>)<span class="variable">$</span>(<span class="variable">$VENV</span>)"</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"doesn't contain a virtualenv (yet)."</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"Create it with 'mkvirtualenv <span class="variable">$</span>(<span class="variable">$VENV</span>)'"</span></span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="built_in">iex</span> (<span class="string">"<span class="variable">$</span>(<span class="variable">$WORKON_HOME</span>)\<span class="variable">$</span>(<span class="variable">$VENV</span>)\Scripts\activate.ps1"</span>)</span><br></pre></td></tr></tbody></table></figure><p>这样我们就可以在<code>powershell</code>中使用<code>workon &lt;虚拟环境名&gt;</code>进入指定的虚拟环境，愉快的使用<code>virtualenvwrapper</code>来创建和管理<code>Python虚拟环境</code>。</p><p><img src="https://s2.loli.net/2022/10/28/IGwVkvK4lmWFQni.png"></p><h3 id="win11中cmd被禁用的问题"><a href="#win11中cmd被禁用的问题" class="headerlink" title="win11中cmd被禁用的问题"></a>win11中cmd被禁用的问题</h3><p>有人可能会遇到<code>win11</code>中<code>cmd</code>被禁用的情况，打开<code>cmd</code>会一闪而过，这时我们无法运行<code>.bat</code>脚本，导致<code>virtualenvwrapper</code>的命令都无法使用，这种i情况一般是注册表被修改了，我们可以通过编辑注册表来恢复<code>cmd</code>：</p><ol><li><p>通过<code>win + r</code>组合键打开运行对话框；</p></li><li><p>键入<code>gpedit.msc</code>并按<code>Enter</code>打开注册表；</p></li><li><p>找到<code>HKEY_LOCAL_MACHINE\Software\Microsoft\Command Processor\AutoRun</code>并将里面的值清空。</p></li></ol><p>这样我们应该就可以正常使用<code>cmd</code>命令提示符了。</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> virtualenvwrapper </category>
          
          <category> Win11 </category>
          
          <category> powershell </category>
          
      </categories>
      
      
        <tags>
            
            <tag> virtualenvwrapper </tag>
            
            <tag> powershell </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
